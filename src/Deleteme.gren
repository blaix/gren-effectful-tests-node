module Deleteme exposing (await, test)

import Expect exposing (Expectation)
import Task exposing (Task)
import Test


type alias Test a =
    Task Never (InternalTest a)


type InternalTest a
    = Box a
    | Ready Test.Test


test : String -> ({} -> Expectation) -> Test a
test description thunk =
    Test.test description thunk
        |> Ready
        |> Task.succeed


await : Task error a -> String -> (a -> Test a) -> Test a
await task description callback =
    task
        |> Task.map Box
        |> Task.onError 
            (\e -> 
                (\_ -> Expect.fail ("Task failed with: " ++ (Debug.toString e)))
                    |> Test.test description
                    |> Ready
                    |> Task.succeed
            )
        |> Task.andThen (map callback)
        |> Task.andThen (wrap description)


map : (a -> Test a) -> InternalTest a -> Test a
map fn internalTest =
    when internalTest is
        Box a ->
            fn a
        Ready _ ->
            Task.succeed internalTest


wrap : String -> InternalTest a -> Test a
wrap description internalTest =
    when internalTest is
        Box _ ->
            Task.succeed internalTest
        Ready t ->
            Test.describe description [ t ]
                |> Ready
                |> Task.succeed
